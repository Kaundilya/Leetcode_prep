class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        int n=nums.size();
         vector<int>ans;
        if(n==0)
            return ans;
        sort(nums.begin(),nums.end());
        int mxm=1;
        vector<int>dp(n,1);
        for(int i=1;i<n;i++)
        {
            for(int j=0;j<i;j++)
            {
                if(nums[i]%nums[j]==0)
                {
                    dp[i]=max(dp[i],1+dp[j]);
                    mxm=max(dp[i],mxm);
                }
            }
        }
        
       
        int prev=-1;
        for(int i=n-1;i>=0;i--)
        {
            if(dp[i]==mxm &&(prev%nums[i]==0 || prev==-1))
            {
                prev=nums[i];
                mxm--;
                ans.push_back(nums[i]);
            }
        }
        return ans;
    }
};
