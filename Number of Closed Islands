class Solution {
public:
    int closedIsland(vector<vector<int>>& grid) {
      if(grid.size()<=0 || grid[0].size()<=0)
      return 0;
        int row=grid.size();
        int col=grid[0].size();
        int cnt=0;
        for(int i=1;i<row-1;i++)
        {
            for(int j=1;j<col-1;j++)
            {
                if(grid[i][j]==0)
                    if(dfs(grid,i,j))
                        ++cnt;
            }
        }
        return cnt;
    }
    
    bool dfs(vector<vector<int>>& grid,int i,int j)
    {
         int row=grid.size();
         int col=grid[0].size();
        if(grid[i][j]==-1 || grid[i][j]==1)
            return true;
        if(isOnPerimeter(grid,i,j))
            return false;
        grid[i][j]=-1;
        bool left=dfs(grid,i,j-1);
        bool right=dfs(grid,i,j+1);
        bool up=dfs(grid,i-1,j);
        bool down=dfs(grid,i+1,j);
        
        return left && right && up && down;
       
    }
    
    bool isOnPerimeter(vector<vector<int>>& grid,int i,int j)
    {
        int row=grid.size();
         int col=grid[0].size();
        if(i==0 || j==0 || i==row-1 || j==col-1)
            return true;
        else
            return false;
    }
};
