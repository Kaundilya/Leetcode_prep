class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
       int steps=-1;
        if(grid.size()<=0 || grid[0].size()<=0)
            return -1;
        int cnt=0;
        int row=grid.size();
        int col=grid[0].size();
       
        queue<pair<int,int>>q;
        for(int i=0;i<row;i++)
        {
            for(int j=0;j<col;j++)
            {
                if(grid[i][j]==2)
                {
                    q.push({i,j});
                    grid[i][j]=2;
                }
                    if(grid[i][j]==1)
                        cnt++;
            }
        }
        if(q.empty())
            return cnt>0?-1:0;
        vector<int>dx({0,-1,0,1});
        vector<int>dy({-1,0,1,0});
        while(!q.empty())
        {
            int qsize=q.size();
             steps++;
            while(qsize--)
            {
                
            auto pos=q.front();
            q.pop();
           
            for(int i=0;i<4;i++)
            {
                int x=pos.first+dx[i];
                int y=pos.second+dy[i];
                if(x>=0 && x<row && y>=0 && y<col)
                {
                    if(grid[x][y]==1){
                        q.push({x,y});
                        grid[x][y]=2;
                        
                    }
                    
                }
            }
                
            }  
        }
        
        for(int i=0;i<row;i++)
        {
            for(int j=0;j<col;j++)
            {
                
                if(grid[i][j]==1)
                  return -1;  
            }
            
        }
        return steps;
    }
};
