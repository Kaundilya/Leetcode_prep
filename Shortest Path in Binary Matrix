class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        queue<pair<int,int>>q;
        q.push({0,0});
        vector<vector<int>>vis(m,vector<int>(n,0));
        vis[0][0]=1;
        if(grid[0][0]==1)
            return -1;
        int steps=0;
        vector<int>dx({-1,-1,0,1,1,1,0,-1});
        vector<int>dy({0,1,1,1,0,-1,-1,-1});
        while(!q.empty())
        {
            steps++;
            int n1=q.size();
            while(n1--)
            {
                auto pos=q.front();
                q.pop();
                int x=pos.first;
                int y=pos.second;
                if(x==m-1 && y==m-1) return steps;
                for(int i=0;i<8;i++)
                {
                    int x2=dx[i]+pos.first;
                    int y2=dy[i]+pos.second;
                  if(x2<0 || y2<0 || x2>=m || y2>=n || vis[x2][y2] || grid[x2][y2]==1) continue;
                    vis[x2][y2]=1;
                    q.push({x2,y2});
                }
            }
        }
        
      return -1;  
    }
};
